# Make sure ocamlbuild can find opam-managed packages: first run
#
# eval `opam config env`

# Easiest way to build: using ocamlbuild, which in turn uses ocamlfind

.PHONY : all
all : strux.native printbig.o stack.o linkedlist.o queue.o

.PHONY : strux.native
strux.native :
	ocamlbuild -use-ocamlfind -pkgs llvm,llvm.analysis -cflags -w,+a-4 \
		strux.native

# "make clean" removes all generated files

.PHONY : clean
clean :
	ocamlbuild -clean
	rm -rf testall.log *.diff strux scanner.ml parser.ml parser.mli
	rm -rf printbig stack queue linkedlist
	rm -rf *.cmx *.cmi *.cmo *.cmx *.o *.s *.ll *.out *.exe

OBJS = ast.cmx codegen.cmx parser.cmx scanner.cmx semant.cmx strux.cmx

YACC = ocamlyacc

strux: $(OBJS)
	# ocamlfind ocamlopt -linkpkg -package llvm -package llvm.analysis $(OBJS) -o strux
	ocamlfind ocamlopt -linkpkg -package llvm -package llvm.analysis $(OBJS) -o strux

scanner.ml: scanner.mll
	ocamllex scanner.mll

parser.ml parser.mli: parser.mly
	$(YACC) parser.mly

%.cmo : %.ml
	ocamlc -c $<

%.cmi : %.mli
	ocamlc -c $<

%.cmx : %.ml
	ocamlfind ocamlopt -c -package llvm $<

printbig : printbig.c
	cc -o printbig -DBUILD_TEST printbig.c

stack : stack.c
	cc -o stack -DBUILD_TEST stack.c

linkedlist : linkedlist.c
	cc -o linkedlist -DBUILD_TEST linkedlist.c

queue : queue.c
	cc -o queue -DBUILD_TEST queue.c

### Generated by "ocamldep *.ml *.mli" after building scanner.ml and parser.ml
ast.cmo :
ast.cmx :
codegen.cmo : ast.cmo
codegen.cmx : ast.cmx
strux.cmo : semant.cmo scanner.cmo parser.cmi codegen.cmo ast.cmo
strux.cmx : semant.cmx scanner.cmx parser.cmx codegen.cmx ast.cmx
parser.cmo : ast.cmo parser.cmi
parser.cmx : ast.cmx parser.cmi
scanner.cmo : parser.cmi
scanner.cmx : parser.cmx
semant.cmo : ast.cmo
semant.cmx : ast.cmx
parser.cmi : ast.cmo

# Building the tarball

TESTS = add-1 add-2 add-3 assign-1 assign-2 assign-3 assign-4 decr-1 decr-2 for-1 for-2	\
    div-1 div-2 div-3 elif-1 hello if-1 if-2 if-3 incr-1 local-1	\
    mod-1 mod-2 multiple-1 print-1 print-2 print-3 print-4 print-5 queue-1	\
    return-1 return-2 return-3 subtract-1 var-1 var-2 while-1 printbig

FAILS = no-main-1 return-1

TESTFILES = $(TESTS:%=test-%.strux) $(TESTS:%=test-%.out) \
	    $(FAILS:%=fail-%.strux) $(FAILS:%=fail-%.err)

TARFILES = ast.ml codegen.ml Makefile _tags strux.ml parser.mly README \
        scanner.mll semant.ml testall.sh printbig.c arcade-font.pbm font2c \
	$(TESTFILES:%=tests/%)

strux-llvm.tar.gz : $(TARFILES)
	cd .. && tar czf strux-llvm/strux-llvm.tar.gz \
		$(TARFILES:%=strux-llvm/%)
